# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        slow=head
        fast=head
        while(fast.next != None and fast.next.next != None):
            slow=slow.next
            fast=fast.next.next
            
            
        slow.next=self.reverse(slow.next)
        slow=slow.next
        
        while(slow != None):
            if (head.val != slow.val):
                return False
            slow=slow.next
            head=head.next
        return True
    
    
    def reverse(self,head):
        prev=None
        curr=head
        while(curr):
            nxt=curr.next
            curr.next=prev
            prev=curr
            curr=nxt
            
        return prev
    
